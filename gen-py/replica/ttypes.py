#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ReadResult(object):
    """
    Attributes:
     - value
     - vector_clock
    """


    def __init__(self, value=None, vector_clock=None,):
        self.value = value
        self.vector_clock = vector_clock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.vector_clock = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = iprot.readI32()
                        self.vector_clock[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReadResult')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 1)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.vector_clock is not None:
            oprot.writeFieldBegin('vector_clock', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.vector_clock))
            for kiter7, viter8 in self.vector_clock.items():
                oprot.writeI32(kiter7)
                oprot.writeI32(viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AntiEntropyResult(object):
    """
    Attributes:
     - new_writes
     - vector_clock
    """


    def __init__(self, new_writes=None, vector_clock=None,):
        self.new_writes = new_writes
        self.vector_clock = vector_clock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.new_writes = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = {}
                        (_ktype16, _vtype17, _size15) = iprot.readMapBegin()
                        for _i19 in range(_size15):
                            _key20 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val21 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem14[_key20] = _val21
                        iprot.readMapEnd()
                        self.new_writes.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.vector_clock = {}
                    (_ktype23, _vtype24, _size22) = iprot.readMapBegin()
                    for _i26 in range(_size22):
                        _key27 = iprot.readI32()
                        _val28 = iprot.readI32()
                        self.vector_clock[_key27] = _val28
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AntiEntropyResult')
        if self.new_writes is not None:
            oprot.writeFieldBegin('new_writes', TType.LIST, 1)
            oprot.writeListBegin(TType.MAP, len(self.new_writes))
            for iter29 in self.new_writes:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter29))
                for kiter30, viter31 in iter29.items():
                    oprot.writeString(kiter30.encode('utf-8') if sys.version_info[0] == 2 else kiter30)
                    oprot.writeString(viter31.encode('utf-8') if sys.version_info[0] == 2 else viter31)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vector_clock is not None:
            oprot.writeFieldBegin('vector_clock', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.vector_clock))
            for kiter32, viter33 in self.vector_clock.items():
                oprot.writeI32(kiter32)
                oprot.writeI32(viter33)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ReadResult)
ReadResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'value', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'vector_clock', (TType.I32, None, TType.I32, None, False), None, ),  # 2
)
all_structs.append(AntiEntropyResult)
AntiEntropyResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'new_writes', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 1
    (2, TType.MAP, 'vector_clock', (TType.I32, None, TType.I32, None, False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
