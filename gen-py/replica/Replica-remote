#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from replica import Replica
from replica.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void setID(i32 id)')
    print('  bool addConnection(i32 id, i32 port)')
    print('  bool removeConnection(i32 id)')
    print('   getStore()')
    print('  void write(string key, string value, i32 cid, i32 version)')
    print('  ReadResult read(string key, i32 cid, i32 version)')
    print('  void smallListen(string key, string value, i32 kv_ts, i32 rid, i32 cid, i32 version,  seen, i32 msg_ts)')
    print('  void bigListen( loaf,  seen, i32 msg_ts)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Replica.Client(protocol)
transport.open()

if cmd == 'setID':
    if len(args) != 1:
        print('setID requires 1 args')
        sys.exit(1)
    pp.pprint(client.setID(eval(args[0]),))

elif cmd == 'addConnection':
    if len(args) != 2:
        print('addConnection requires 2 args')
        sys.exit(1)
    pp.pprint(client.addConnection(eval(args[0]), eval(args[1]),))

elif cmd == 'removeConnection':
    if len(args) != 1:
        print('removeConnection requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeConnection(eval(args[0]),))

elif cmd == 'getStore':
    if len(args) != 0:
        print('getStore requires 0 args')
        sys.exit(1)
    pp.pprint(client.getStore())

elif cmd == 'write':
    if len(args) != 4:
        print('write requires 4 args')
        sys.exit(1)
    pp.pprint(client.write(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'read':
    if len(args) != 3:
        print('read requires 3 args')
        sys.exit(1)
    pp.pprint(client.read(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'smallListen':
    if len(args) != 8:
        print('smallListen requires 8 args')
        sys.exit(1)
    pp.pprint(client.smallListen(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'bigListen':
    if len(args) != 3:
        print('bigListen requires 3 args')
        sys.exit(1)
    pp.pprint(client.bigListen(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
